{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","show","setShow","weatherData","setWeatherData","city","setCity","error","setError","handleCity","e","target","value","toLowerCase","getWeatherData","nav","navigator","language","split","axios","get","then","response","data","catch","toString","includes","icon","weather","map","src","className","Alert","variant","onClose","dismissible","Heading","type","placeholder","onChange","onClick","description","charAt","toUpperCase","slice","alt","main","temp","feels_like","temp_min","temp_max","humidity","pressure","clouds","all","wind","speed","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAkGeA,MA9Ff,WACE,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,MAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwBJ,mBAAS,MAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BN,mBAAS,MAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEA,SAASC,EAAWC,GACmB,OAAjCA,EAAEC,OAAOC,MAAMC,eACjBP,EAAQI,EAAEC,OAAOC,MAAMC,eAI3B,SAASC,IACP,IACMC,EADOC,UAAUC,SACNC,MAAM,KAEvBC,IAAMC,IAAN,4DAA+Df,EAA/D,wDAAmHU,EAAI,GAAvH,kBAA0IM,MAAK,SAAAC,GAC7Id,EAAS,MACTJ,EAAekB,EAASC,SACvBC,OAAM,SAACjB,GACRH,EAAe,MACfF,GAAQ,GACJK,EAAMkB,WAAWC,SAAS,KAC5BlB,EAAS,2CAETA,EAASD,EAAMkB,eAKrB,GAAoB,OAAhBtB,EAAsB,CACxB,IAAMwB,EAAOxB,EAAYyB,QAAQC,KAAI,qBAAEF,QACjCG,EAAG,2CAAuCH,EAAvC,WAET,OACE,sBAAKI,UAAU,MAAf,UACCxB,GAASN,GACN,cAAC+B,EAAA,EAAD,CAAOD,UAAU,OAAOE,QAAQ,SAASC,QAAS,kBAAMhC,GAAQ,IAAQiC,aAAW,EAAnF,SACA,cAACH,EAAA,EAAMI,QAAP,UAAgB7B,MAEhB,uBAAO8B,KAAK,OAAOC,YAAY,mBAAmBC,SAAU9B,IAC5D,wBAAQsB,UAAU,MAAMS,QAAS1B,EAAjC,+BACF,+BACI,0CAEGX,EAAYyB,QAAQC,KACnB,gBAAGY,EAAH,EAAGA,YAAH,iBACMA,EAAYC,OAAO,GAAGC,cAAgBF,EAAYG,MAAM,UAGlE,6BACE,qBAAKC,IAAI,gBAAgBf,IAAKA,MAEhC,+CACgB3B,EAAY2C,KAAKC,KADjC,WAGA,yCACU5C,EAAY2C,KAAKE,WAD3B,WAGA,yDAC0B7C,EAAY2C,KAAKG,SAD3C,WAGA,0DAC2B9C,EAAY2C,KAAKI,SAD5C,WAGA,iDAAe/C,EAAY2C,KAAKK,SAAhC,OACA,wCAAWhD,EAAY2C,KAAKM,SAA5B,SACA,0CAAajD,EAAYkD,OAAOC,IAAhC,OACA,gDACiB,IACdnD,EAAYoD,KAAKC,MAAMC,QAAQ,GAAM,IAAKA,QAAQ,GAFrD,aAMJ,qBAAK1B,UAAU,WAAf,SACE,8DAKN,OACE,sBAAKA,UAAU,MAAf,UACGxB,GAASN,GAAQ,cAAC+B,EAAA,EAAD,CAAOD,UAAU,OAAOE,QAAQ,SAASC,QAAS,kBAAMhC,GAAQ,IAAQiC,aAAW,EAAnF,SAClB,cAACH,EAAA,EAAMI,QAAP,UAAgB7B,MAEd,uBAAO8B,KAAK,OAAOC,YAAY,mBAAmBC,SAAU9B,IAC5D,wBAAQsB,UAAU,MAAMS,QAAS1B,EAAjC,+BACF,qBAAKiB,UAAU,WAAf,SACE,+DChFK2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ddec69d0.chunk.js","sourcesContent":["import React, { useState} from \"react\";\nimport axios from \"axios\";\nimport { Alert } from \"react-bootstrap\";\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(null);\n  const [error, setError] = useState(null);\n\n  function handleCity(e) {\n    if (e.target.value.toLowerCase() !== null || \"\" || undefined){\n      setCity(e.target.value.toLowerCase())\n    }\n  }\n\n  function getWeatherData() {\n    const navL = navigator.language;\n    const nav = navL.split(\"-\");\n\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=909b25942a91dd2c10a0a46a8e77451a&lang=${nav[0]}&units=metric`).then(response => {\n      setError(null)\n      setWeatherData(response.data);\n    }).catch((error) => {\n      setWeatherData(null);\n      setShow(true);\n      if (error.toString().includes(404)) {\n        setError(\"Grad ili Naselje nije pronađeno...\")\n      } else {\n        setError(error.toString())\n      }\n    });\n  }\n\n  if (weatherData !== null) {\n    const icon = weatherData.weather.map(({icon}) => icon);\n    const src = `http://openweathermap.org/img/wn/${icon}@2x.png`;\n\n    return (\n      <div className=\"App\">\n      {error && show && \n          <Alert className=\"mt-4\" variant=\"danger\" onClose={() => setShow(false)} dismissible>\n          <Alert.Heading>{error}</Alert.Heading>\n        </Alert>}\n          <input type=\"text\" placeholder=\"Grad ili Naselje\" onChange={handleCity} />\n          <button className=\"cta\" onClick={getWeatherData} >Klikni za vrijeme</button>\n        <ul>\n            <li>\n              Vrijeme:\n              {weatherData.weather.map(\n                ({ description }) =>\n                  ` ${description.charAt(0).toUpperCase() + description.slice(1)}`\n              )}\n            </li>\n            <li>\n              <img alt=\"Slika Vremena\" src={src} />\n            </li>\n            <li>\n              Temperatura: {weatherData.main.temp}&deg;C\n            </li>\n            <li>\n              Osjet: {weatherData.main.feels_like}&deg;C\n            </li>\n            <li>\n              Minimalna temperatura: {weatherData.main.temp_min}&deg;C\n            </li>\n            <li>\n              Maksimalna temperatura: {weatherData.main.temp_max}&deg;C\n            </li>\n            <li>Vlažnost: {weatherData.main.humidity}%</li>\n            <li>Tlak: {weatherData.main.pressure}hPa</li>\n            <li>Oblaci: {weatherData.clouds.all}%</li>\n            <li>\n              Brzina vjetra:{\" \"}\n              {weatherData.wind.speed.toFixed(1) * (3.6).toFixed(0)}\n              km/h\n            </li>\n          </ul>\n        <div className=\"kopirajt\">\n          <h1>&copy; Lorenzo Melon 2021</h1>\n        </div>\n      </div>\n   );\n  } else {\n    return (\n      <div className=\"App\">\n        {error && show && <Alert className=\"mt-4\" variant=\"danger\" onClose={() => setShow(false)} dismissible>\n        <Alert.Heading>{error}</Alert.Heading>\n      </Alert>}\n          <input type=\"text\" placeholder=\"Grad ili Naselje\" onChange={handleCity} />\n          <button className=\"cta\" onClick={getWeatherData}>Klikni za vrijeme</button>\n        <div className=\"kopirajt\">\n          <h1>&copy; Lorenzo Melon 2021</h1>\n        </div>\n      </div>);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}