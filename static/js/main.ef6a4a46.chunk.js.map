{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","weatherData","setWeatherData","city","setCity","state","setState","zip","setZip","handleCity","e","target","value","toLowerCase","handleState","handleZip","getWeatherData","nav","navigator","language","split","fetch","then","response","json","data","catch","error","console","log","src","weather","map","icon","className","type","placeholder","onChange","onClick","description","charAt","toUpperCase","slice","alt","main","temp","feels_like","temp_min","temp_max","humidity","pressure","clouds","all","wind","speed","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef6a4a46.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(null);\n  const [state, setState] = useState(null);\n  const [zip, setZip] = useState(null);\n\n  function handleCity(e) {\n    setCity(e.target.value.toLowerCase());\n  }\n\n  function handleState(e) {\n    setState(e.target.value.toLowerCase());\n  }\n\n  function handleZip(e) {\n    setZip(e.target.value.toLowerCase());\n  }\n\n  function getWeatherData() {\n    const navL = navigator.language;\n    const nav = navL.split(\"-\");\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${state},${zip}&appid=909b25942a91dd2c10a0a46a8e77451a&lang=${nav[0]}&units=metric`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setWeatherData(data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  if (weatherData !== null) {\n    const icon = weatherData.weather.map(({ icon }) => icon);\n    const src = \"http://openweathermap.org/img/wn/\" + icon + \"@2x.png\";\n\n    return (\n      <div className=\"App\">\n        <section className=\"controls\">\n          <input type=\"text\" placeholder=\"Grad\" onChange={handleCity} />\n          <input type=\"text\" placeholder=\"Država\" onChange={handleState} />\n          <input\n            type=\"text\"\n            placeholder=\"Poštanski broj\"\n            onChange={handleZip}\n          />\n          <button onClick={getWeatherData}>Klikni za vrijeme</button>\n          <ul>\n            <li className=\"lista\">\n              Vrijeme:{\" \"}\n              {weatherData.weather.map(\n                ({ description }) =>\n                  description.charAt(0).toUpperCase() + description.slice(1)\n              )}\n            </li>\n            <li className=\"lista2\">\n              <img alt=\"picture\" src={src} />\n            </li>\n            <li className=\"lista2\">\n              Temperatura: {weatherData.main.temp}&deg;C\n            </li>\n            <li className=\"lista\">\n              Osjet: {weatherData.main.feels_like}&deg;C\n            </li>\n            <li className=\"lista\">\n              Minimalna temperatura: {weatherData.main.temp_min}&deg;C\n            </li>\n            <li className=\"lista\">\n              Maksimalna temperatura: {weatherData.main.temp_max}&deg;C\n            </li>\n            <li className=\"lista\">Vlažnost: {weatherData.main.humidity}%</li>\n            <li className=\"lista\">Tlak: {weatherData.main.pressure}hPa</li>\n            <li className=\"lista\">Oblaci: {weatherData.clouds.all}%</li>\n            <li className=\"lista\">\n              Brzina vjetra:{\" \"}\n              {weatherData.wind.speed.toFixed(1) * (3.6).toFixed(0)}\n              km/h\n            </li>\n          </ul>\n        </section>\n        <div className=\"section3\">\n          <h1>&copy; Lorenzo Melon 2021</h1>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <section className=\"controls\">\n          <input type=\"text\" placeholder=\"Grad\" onChange={handleCity} />\n          <input type=\"text\" placeholder=\"Država\" onChange={handleState} />\n          <input\n            type=\"text\"\n            placeholder=\"Poštanski broj\"\n            onChange={handleZip}\n          />\n          <button onClick={getWeatherData}>Klikni za vrijeme</button>\n        </section>\n        <div className=\"section2\">\n          <h1>&copy; Lorenzo Melon 2021</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}